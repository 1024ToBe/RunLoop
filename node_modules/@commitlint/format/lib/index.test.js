'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _lodash = require('lodash.includes');

var _lodash2 = _interopRequireDefault(_lodash);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ok = _chalk2.default.bold(`${_chalk2.default.green('✔')}   found 0 problems, 0 warnings`);

(0, _ava2.default)('does nothing without arguments', t => {
	const actual = (0, _2.default)();
	t.deepEqual(actual, ok);
});

(0, _ava2.default)('does nothing without report results', t => {
	const actual = (0, _2.default)({ results: [] });
	t.deepEqual(actual, ok);
});

(0, _ava2.default)('does nothing without .errors and .warnings', t => {
	const actual = (0, _2.default)({ results: [{}] });
	t.deepEqual(actual, ok);
});

(0, _ava2.default)('returns empty summary of problems for empty .errors and .warnings', t => {
	const actual = (0, _2.default)({
		results: [{
			errors: [],
			warnings: []
		}]
	});

	t.true(actual.includes('0 problems, 0 warnings'));
});

(0, _ava2.default)('returns a correct of empty .errors and .warnings', t => {
	const actualError = (0, _2.default)({
		results: [{
			errors: [{
				level: 2,
				name: 'error-name',
				message: 'There was an error'
			}]
		}]
	});

	const actualWarning = (0, _2.default)({
		results: [{
			warnings: [{
				level: 1,
				name: 'warning-name',
				message: 'There was a problem'
			}]
		}]
	});

	t.true((0, _lodash2.default)(actualError, 'There was an error'));
	t.true((0, _lodash2.default)(actualError, '1 problems, 0 warnings'));
	t.true((0, _lodash2.default)(actualWarning, 'There was a problem'));
	t.true((0, _lodash2.default)(actualWarning, '0 problems, 1 warnings'));
});

(0, _ava2.default)('uses appropriate signs by default', t => {
	const actualError = (0, _2.default)({
		results: [{
			errors: [{
				level: 2,
				name: 'error-name',
				message: 'There was an error'
			}]
		}]
	});

	const actualWarning = (0, _2.default)({
		results: [{
			warnings: [{
				level: 1,
				name: 'warning-name',
				message: 'There was a problem'
			}]
		}]
	});

	t.true((0, _lodash2.default)(actualError, '✖'));
	t.true((0, _lodash2.default)(actualWarning, '⚠'));
});

(0, _ava2.default)('uses signs as configured', t => {
	const options = { signs: ['HNT', 'WRN', 'ERR'] };
	const actualError = (0, _2.default)({
		results: [{
			errors: [{
				level: 2,
				name: 'error-name',
				message: 'There was an error'
			}]
		}]
	}, options);

	const actualWarning = (0, _2.default)({
		results: [{
			warnings: [{
				level: 1,
				name: 'warning-name',
				message: 'There was a problem'
			}]
		}]
	}, options);

	t.true((0, _lodash2.default)(actualError, 'ERR'));
	t.true((0, _lodash2.default)(actualWarning, 'WRN'));
});
//# sourceMappingURL=index.test.js.map